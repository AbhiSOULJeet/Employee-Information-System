/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.project.employeeinformationsystem;
import java.sql.*;
import java.awt.Color;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author abhij
 */
@SuppressWarnings("serial")
public class EmpRegistration extends javax.swing.JFrame {
        Connection con;
        PreparedStatement query;
    
    private void Connectt() throws SQLException{
       
        try {
            
            Class.forName("com.mysql.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mysql://localhost/employee","root","");
            
            System.out.println("connected");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EmpRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }
    
}

    /**
     * Creates new form EmpRegistration
     * @throws java.sql.SQLException
     */
    public EmpRegistration() throws SQLException {
        
        Connectt();
        initComponents();
       
    }
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void clear(){
        empIdTxt.setText("");
        empNameTxt.setText("");
        emailIdTxt.setText("");
        contactTxt.setText("");
        fatherNameTxt.setText("");
        dojTxt.setDate(null);
        dobTxt.setDate(null);
        
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jCalendar2 = new com.toedter.calendar.JCalendar();
        MainPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblEmpId = new javax.swing.JLabel();
        fatherNameTxt = new javax.swing.JTextField();
        lblEmailId = new javax.swing.JLabel();
        empIdTxt = new javax.swing.JTextField();
        lblContact = new javax.swing.JLabel();
        emailIdTxt = new javax.swing.JTextField();
        lblFatherName = new javax.swing.JLabel();
        lblDoj = new javax.swing.JLabel();
        contactTxt = new javax.swing.JTextField();
        lblDob = new javax.swing.JLabel();
        Submit = new javax.swing.JButton();
        Update = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        Delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblEmpName = new javax.swing.JLabel();
        empNameTxt = new javax.swing.JTextField();
        dobTxt = new com.toedter.calendar.JDateChooser();
        dojTxt = new com.toedter.calendar.JDateChooser();
        lblResult = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        MainPanel.setBackground(java.awt.SystemColor.activeCaption);
        MainPanel.setBorder(new javax.swing.border.MatteBorder(null));
        MainPanel.setToolTipText("");

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Microsoft New Tai Lue", 1, 36)); // NOI18N
        jLabel1.setText("Employee Registration");

        lblEmpId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblEmpId.setLabelFor(empIdTxt);
        lblEmpId.setText("Employee ID");

        fatherNameTxt.setBackground(new java.awt.Color(255, 204, 51));
        fatherNameTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        fatherNameTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        fatherNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fatherNameTxtActionPerformed(evt);
            }
        });

        lblEmailId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblEmailId.setLabelFor(emailIdTxt);
        lblEmailId.setText("Email ID");

        empIdTxt.setBackground(new java.awt.Color(255, 204, 51));
        empIdTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        empIdTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        empIdTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                empIdTxtFocusLost(evt);
            }
        });

        lblContact.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblContact.setLabelFor(contactTxt);
        lblContact.setText("Contact");

        emailIdTxt.setBackground(new java.awt.Color(255, 204, 0));
        emailIdTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        emailIdTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        emailIdTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailIdTxtFocusLost(evt);
            }
        });
        emailIdTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                emailIdTxtMouseReleased(evt);
            }
        });
        emailIdTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailIdTxtActionPerformed(evt);
            }
        });

        lblFatherName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblFatherName.setLabelFor(fatherNameTxt);
        lblFatherName.setText("Father Name");

        lblDoj.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDoj.setLabelFor(dojTxt);
        lblDoj.setText("Date Of Joining");

        contactTxt.setBackground(new java.awt.Color(255, 204, 0));
        contactTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        contactTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        contactTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactTxtActionPerformed(evt);
            }
        });

        lblDob.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDob.setLabelFor(dobTxt);
        lblDob.setText("Date Of Birth");

        Submit.setBackground(new java.awt.Color(51, 255, 0));
        Submit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Submit.setText("Submit");
        Submit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SubmitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SubmitMouseExited(evt);
            }
        });
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        Update.setBackground(new java.awt.Color(51, 102, 255));
        Update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Update.setForeground(new java.awt.Color(255, 255, 255));
        Update.setText("Update");
        Update.setBorder(null);
        Update.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                UpdateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                UpdateMouseExited(evt);
            }
        });
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        Search.setBackground(new java.awt.Color(255, 255, 0));
        Search.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Search.setText("Search");
        Search.setBorder(null);
        Search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SearchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SearchMouseExited(evt);
            }
        });
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        Delete.setBackground(new java.awt.Color(255, 51, 0));
        Delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Delete.setForeground(new java.awt.Color(255, 255, 255));
        Delete.setText("Delete");
        Delete.setBorder(null);
        Delete.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DeleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                DeleteMouseExited(evt);
            }
        });
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Employee Name", "Email", "Father Name", "Contact", "DOB", "DOJ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        lblEmpName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblEmpName.setLabelFor(empNameTxt);
        lblEmpName.setText("Employee Name");

        empNameTxt.setBackground(new java.awt.Color(255, 204, 51));
        empNameTxt.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        empNameTxt.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        empNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                empNameTxtActionPerformed(evt);
            }
        });

        dobTxt.setBackground(new java.awt.Color(255, 204, 51));

        dojTxt.setBackground(new java.awt.Color(255, 204, 0));

        lblResult.setFont(new java.awt.Font("JetBrains Mono NL", 1, 14)); // NOI18N

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmailId, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmpId, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblContact, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFatherName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(103, 103, 103)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(empIdTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fatherNameTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                                    .addComponent(emailIdTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(contactTxt, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(empNameTxt))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1))
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDoj, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDob, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(103, 103, 103)
                                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dobTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dojTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 302, Short.MAX_VALUE)))
                .addContainerGap())
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(223, 261, Short.MAX_VALUE))
                    .addGroup(MainPanelLayout.createSequentialGroup()
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmpId, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(empIdTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(empNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmpName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmailId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fatherNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFatherName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblContact, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(contactTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(lblDob, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblDoj, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dobTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(dojTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)))
                        .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblResult, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(MainPanelLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Delete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(91, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 574, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 499, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(623, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(92, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(5, 5, 5)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void empNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_empNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_empNameTxtActionPerformed

    private void DeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteActionPerformed
        // TODO add your handling code here:
//      int result=DeleteMouseClicked(java.awt.event.ActionEvent evt);
//        if(result>0){
            
            
        
//        else{
//        }
        
    }//GEN-LAST:event_DeleteActionPerformed

    private void DeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteMouseExited
        // TODO add your handling code here:
        Delete.setBackground(new java.awt.Color(255, 51, 0));
        //Delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Delete.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_DeleteMouseExited

    private void DeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteMouseEntered
        // TODO add your handling code here:
        Delete.setForeground(new java.awt.Color(255, 51, 0));
        //Delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Delete.setBackground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_DeleteMouseEntered

        @SuppressWarnings({"unchecked", "unchecked", "unchecked", "unchecked"})
    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        int CC;
        try{
            int eid=Integer.parseInt(empIdTxt.getText());
            query=con.prepareStatement("SELECT *from employeedatabase where EmployeeId="+eid);
            ResultSet Rs=query.executeQuery();
            ResultSetMetaData RSMD=Rs.getMetaData();
            CC=RSMD.getColumnCount();
            DefaultTableModel DFT=(DefaultTableModel) jTable1.getModel();
            DFT.setRowCount(0);
            while(Rs.next()){
                Vector v2=new Vector();

                for(int li=1;li<=CC;li++){
                    @SuppressWarnings("unchecked")
                    boolean add = v2.add(Rs.getString("EmployeeId"));

                    v2.add(Rs.getString("EmployeeName"));
                    v2.add(Rs.getString("EmailId"));

                    v2.add(Rs.getString("FatherName"));
                    v2.add(Rs.getString("Contact"));
                    v2.add(Rs.getString("DOB"));
                    v2.add(Rs.getString("DOJ"));

                }
                DFT.addRow(v2);

            }

        }
        catch (SQLException e) {

        }
    }//GEN-LAST:event_SearchActionPerformed

    private void SearchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchMouseExited
        // TODO add your handling code here:
        Search.setBackground(new java.awt.Color(255, 255, 0));
        Search.setForeground(Color.black);
    }//GEN-LAST:event_SearchMouseExited

    private void SearchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SearchMouseEntered
        // TODO add your handling code here:
        Search.setForeground(new java.awt.Color(255, 255, 0));
        Search.setBackground(Color.black);
    }//GEN-LAST:event_SearchMouseEntered

    private void UpdateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateMouseExited
        // TODO add your handling code here:
        Update.setBackground(new java.awt.Color(51, 102, 255));
        //Update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Update.setForeground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_UpdateMouseExited

    private void UpdateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateMouseEntered
        // TODO add your handling code here:
        Update.setForeground(new java.awt.Color(51, 102, 255));
        //Update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Update.setBackground(new java.awt.Color(255, 255, 255));
    }//GEN-LAST:event_UpdateMouseEntered

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
        try {
            insert();
        } catch (SQLException ex) {
            Logger.getLogger(EmpRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_SubmitActionPerformed

    private void SubmitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SubmitMouseExited
        // TODO add your handling code here:
        Submit.setForeground(Color.black);
        Submit.setBackground(Color.green);
    }//GEN-LAST:event_SubmitMouseExited

    private void SubmitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SubmitMouseEntered
        // TODO add your handling code here:
        Submit.setForeground(Color.green);
        Submit.setBackground(Color.black);
    }//GEN-LAST:event_SubmitMouseEntered

    private void contactTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactTxtActionPerformed

    private void emailIdTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailIdTxtActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_emailIdTxtActionPerformed

    private void empIdTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_empIdTxtFocusLost
        
        
        String str=empIdTxt.getText();
        if(str.length()>0){
            for(int i=0;i<str.length();i++){
                if(!Character.isDigit(str.charAt(i))){
                    JOptionPane.showMessageDialog(rootPane, "Employee ID should have numbers only!");
                    empIdTxt.setText("");
                    
                    return;
                }
            }
        }
        try {
            if(str.length()>0 && findDuplicate()){
                showMsg();
            }
            else if(str.length()>0 && !findDuplicate()){
                lblResult.setForeground(Color.blue);
                lblResult.setText("Employee ID not allocated to any Employee!");
            }

        } catch (SQLException ex) {
            Logger.getLogger(EmpRegistration.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_empIdTxtFocusLost

    private void fatherNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fatherNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fatherNameTxtActionPerformed

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
        int EmployeeId=Integer.parseInt(empIdTxt.getText()),  Contact=Integer.parseInt(contactTxt.getText());
        String EmployeeName=empNameTxt.getText(), EmailId=emailIdTxt.getText(), FatherName=fatherNameTxt.getText(), DOB=dobTxt.getDate().toString(), DOJ=dojTxt.getDate().toString();
                
            try{
              
            query=con.prepareStatement("update employeedatabase set EmployeeName=?, EmailId=?, FatherName=?, Contact=?, DOB=?, DOJ=? where EmployeeId="+EmployeeId);
            
            //query.setInt(1, EmployeeId);
            query.setString(1, EmployeeName);
            query.setString(2, EmailId);
            
            query.setString(3, FatherName);
            query.setInt(4, Contact);
              query.setString(5, DOB);
              query.setString(6, DOJ);
            int x=query.executeUpdate();
            if(x>0){
                lblResult.setForeground(Color.blue);
                lblResult.setText("Successfully Updated!!");
                table_update();
                clear();
            }
            
            
        }
            catch (SQLException ex){
                Logger.getLogger(EmpRegistration.class.getName()).log(Level.SEVERE, null, ex);
                
            }
    }//GEN-LAST:event_UpdateActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        DefaultTableModel model=(DefaultTableModel) jTable1.getModel();
        int selectedIndex=jTable1.getSelectedRow();
        
        empIdTxt.setText(model.getValueAt(selectedIndex,0).toString());
        empNameTxt.setText(model.getValueAt(selectedIndex,1).toString());
        emailIdTxt.setText(model.getValueAt(selectedIndex,2).toString());
        fatherNameTxt.setText(model.getValueAt(selectedIndex,3).toString());
        contactTxt.setText(model.getValueAt(selectedIndex,4).toString());
//        dojTxt.setDateFormatString(model.getValueAt(selectedIndex,5).toString());
//        dojTxt.setDateFormatString(model.getValueAt(selectedIndex,6).toString());
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void DeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteMouseClicked
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to delete?");
        if(result==0){
        try {
                int eid=Integer.parseInt(empIdTxt.getText());
                query=con.prepareStatement("DELETE FROM employeedatabase WHERE EmployeeId="+eid);
                query.executeUpdate();
                lblResult.setForeground(Color.red);
                lblResult.setText("Successfully Deleted");
                clear();
                ((DefaultTableModel)jTable1.getModel()).removeRow(0);
                
            } catch (SQLException ex) {
                Logger.getLogger(EmpRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    
    
    
    }//GEN-LAST:event_DeleteMouseClicked

    private void emailIdTxtMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emailIdTxtMouseReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_emailIdTxtMouseReleased

    private void emailIdTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailIdTxtFocusLost
        // TODO add your handling code here:
        String email=emailIdTxt.getText();
        if(email.length()>0){
            if(email.contains("@") && email.contains(".") && email.contains("com")){

            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Please enter a correct email address!");
                emailIdTxt.setText("");
            }
        }
    }//GEN-LAST:event_emailIdTxtFocusLost
    
        @SuppressWarnings({"checked", "unchecked", "unchecked", "unchecked"})
     private void table_update() throws SQLException{
    int CC;
    try{
        int eid=Integer.parseInt(empIdTxt.getText());
    query=con.prepareStatement("SELECT *from employeedatabase where EmployeeId="+eid);
    ResultSet Rs=query.executeQuery();
    ResultSetMetaData RSMD=Rs.getMetaData();
    CC=RSMD.getColumnCount();
    DefaultTableModel DFT=(DefaultTableModel) jTable1.getModel();
    DFT.setRowCount(0);
    while(Rs.next()){
        Vector v2=new Vector();
        
        for(int li=1;li<=CC;li++){
            @SuppressWarnings("unchecked")
            boolean add = v2.add(Rs.getString("EmployeeId"));
          
          v2.add(Rs.getString("EmployeeName"));
          v2.add(Rs.getString("EmailId"));
          
          v2.add(Rs.getString("FatherName"));
          v2.add(Rs.getString("Contact"));
          v2.add(Rs.getString("DOB"));
          v2.add(Rs.getString("DOJ"));
          
        }
        DFT.addRow(v2);
        jTable1.doLayout();
        
    }
    
 }
    catch (SQLException e) {
            
   }
}
     
     
     private void showMsg(){
         
            lblResult.setForeground(Color.red);
            lblResult.setText("Employee ID already exists!!"); 
          
     }
     private boolean findDuplicate() throws SQLException{
         int check=Integer.parseInt(empIdTxt.getText());
         
         Statement stmt = con.createStatement();
      //Query to get the number of rows in a table
      String query2 = "select count(EmployeeId) from employeedatabase where EmployeeId="+check;
      //Executing the query
      ResultSet rs = stmt.executeQuery(query2);
      //Retrieving the result
      rs.next();
      int count = rs.getInt(1);
      return count>0;
        
      
         
}
     private void insert() throws SQLException{
         
        int EmployeeId=Integer.parseInt(empIdTxt.getText()),  Contact=Integer.parseInt(contactTxt.getText());
        String EmployeeName=empNameTxt.getText(), EmailId=emailIdTxt.getText(), FatherName=fatherNameTxt.getText(), DOB=dobTxt.getDate().toString(), DOJ=dojTxt.getDate().toString();
                
            try{
              
            query=con.prepareStatement("insert into employeedatabase (EmployeeId, EmployeeName, EmailId, FatherName, Contact, DOB, DOJ) values (?, ?, ?, ?, ?, ?, ?)  ");
            
            query.setInt(1, EmployeeId);
            query.setString(2, EmployeeName);
            query.setString(3, EmailId);
            
            query.setString(4, FatherName);
            query.setInt(5, Contact);
              query.setString(6, DOB);
              query.setString(7, DOJ);
            int x=query.executeUpdate();
            if(x>0){
                lblResult.setForeground(Color.blue);
                lblResult.setText("Successfully added!!");
                table_update();
                clear();
            }
            
            
        }
            catch (SQLException ex){
                Logger.getLogger(EmpRegistration.class.getName()).log(Level.SEVERE, null, ex);
                
            }
         
     }
         
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmpRegistration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
            //</editor-fold>
            
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new EmpRegistration().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(EmpRegistration.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Delete;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton Search;
    private javax.swing.JButton Submit;
    private javax.swing.JButton Update;
    private javax.swing.JTextField contactTxt;
    private com.toedter.calendar.JDateChooser dobTxt;
    private com.toedter.calendar.JDateChooser dojTxt;
    private javax.swing.JTextField emailIdTxt;
    private javax.swing.JTextField empIdTxt;
    private javax.swing.JTextField empNameTxt;
    private javax.swing.JTextField fatherNameTxt;
    private com.toedter.calendar.JCalendar jCalendar2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblDob;
    private javax.swing.JLabel lblDoj;
    private javax.swing.JLabel lblEmailId;
    private javax.swing.JLabel lblEmpId;
    private javax.swing.JLabel lblEmpName;
    private javax.swing.JLabel lblFatherName;
    private javax.swing.JLabel lblResult;
    // End of variables declaration//GEN-END:variables
}
   
